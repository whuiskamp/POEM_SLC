This part of the process will laterally re-distribute mass and tracers based on changes in the ocean's bathymetry and 
volume.

Input data required:
Old land-sea mask
New land-sea mask
MOM6 restart
SIS2 restart
Static grid information (area)

CHECK HALOS
First step is to take the change mask from the chk_water_col script and assign each change cell a halo of an appropriate size.

Inputs required: change mask, cell area field, new land-sea mask
outputs: an array where each change point index lists the required size of the halo
 
Iterate through each changepoint. Beginning with halo of 2, get corresponding area cells, sum them, then determine if they meet a size criteria, if not, repeat but with size increasing by +1

Second step is to calculate the mass in each change point - ocean and sea ice. This is then divided between the halo cells and also weighted by the size of each halo cell (larger cells recieve more mass). This may require a new function? 
When calculaing mass from sea ice model, is there a conversion between ice mass and ocean mass? Look this up in the code.

Ice model: Ice restarts have a couple of variables we are interested in: h_snow, h_ice, part_size (part_sz in model. Fractional ice cover in each cell, for each z-level), lprec, fprec, sal_ice(const), enth_ice, enth_snow and (maybe?) T_skin.
Seems to be no restart variable for pond water on ice. Where is this mass stored?
These variables all have 5 vertical layers and represent the biggest obstacle when changing from ocean -> land. 
rho_ice = 905 kg m-3
rho_snow = 330 kg m-3
ice_bulk_salinity is also set, defaults to 4g/kg but seems to be set to 5 in our test runs. Double check this and find some way of reading in the correct value from the MOM_input file or the logs.

In the SIS_transport.F90 code, there are two subroutines (get_total_amounts and get_total_enthalpy) that calculate sum values for each grid cell in order to check for conservation. Use this to see how variables are treated/ calculated.

For eg: total mass and enthalpy for ice and snow at each grid cell is calculated in the following way:

  total mass     =  grid cell area * cell ice frac  * mass of ice/m2
sum_mca_ice(i,j) =  G%areaT(i,j)   * (part_sz(i,j,k)* mH_ice(i,j,k))

Enthalpy is a bit trickier:

I_Nk = 1.0 / IG%NkIce		   nkIce = number of vertical layers in sea ice	
do m=1,IG%NkIce;           m loops through z levels of ice (we have 4)
	do k=1,IG%CatIce;		     k loops through categories of ice (we have 5)
		do j=jsc,jec;
			do i=isc,iec
    			sum_enth_ice(i,j) = sum_enth_ice(i,j) + (G%areaT(i,j) * &
              ((mH_ice(i,j,k)*part_sz(i,j,k))*I_Nk)) * heat_ice(i,j,k,m)
			enddo;
	  enddo; 
	enddo;
enddo

So:
  total enthalpy  = grid cell area * ((mass of ice/m2  * cell ice frac) * 1/no K levels) * enthalpy of ice
sum_enth_ice(i,j) = (G%areaT(i,j)  * ((mH_ice(i,j,k)*part_sz(i,j,k))    * I_Nk))         * heat_ice(i,j,k,m)

In the restart, energy for ice/snow is stored as enthalpy with units J/kg, which we can convert simply to J.

In the ocean it's a little simpler...

      var we want * vertical grid to kg conversion * cell layer thick  * gridcell area (T) * ocean mask
      				(usually just 1)
sum = var(i,j,k)  * ((GV%H_to_kg_m2                * h(i,j,k))         * (G%areaT(i,j)     * G%mask2dT(i,j)))


 - Be aware that the variable part_size has 6 k-levels, while there are only 5 ice categories. The 1st k-level appears to represent % open ocean, such that all levels add up to 1. Therefore, when reading in part_size, import only levels 2:6.

 - When adding mass and tracers to halo cells, there is a consideration regarding situations when larger masses are redistributed (eg: when land ice extends over ocean, and suddenly several km of ocean are land). How do we sensibly redistribute this? We can't simply dump it all in the top layer. Perhaps it is smart to calculate the delta h for each halo cell, then divide this over the top n k levels, ensuring that each level grows by no more than Xm.

 - When adding mass to cells, weighting is first calculated for each depth level (ie: each z level makes up some % of the total column depth). This is done at the start of the script and *not* re-calculated even though h values will change during redistribution, because their proportional sizes should remain the same.

 - Important consideration: By changing the h of layers when redistributing mass, we are increasing the cell's volume, and therefore inadvertently creating energy/ salt. A subroutine needs to be written that corrects this after mass redistribution is done. This can be done with T2 = m1T1/m2

 - Challenge: how to redistribute heat and salt. In the sea ice model, heat is stored as enthalpy in the restart, while in the MOM restart, it is stored as potential temperature.

 Apparently we can calculate total Heat energy in a grid cell of water the following way (from MOM_sum_ouput.F90, line 675):

 Temp_int(i,j) = Temp_int(i,j) + (tv%C_p * tv%T(i,j,k)) * &
                      (h(i,j,k)*(H_to_kg_m2 * areaTm(i,j)))

 Specifically, Heat = Heat_capacity * Temp * volume * H_to_kg conversion factor

 We can use Q = mcT to then add this energy back into other grid cells (where Q = Heat, m = mass and c = the heat capacity) 

 -- Note C_P = 3925.0 J/K/kg in our runs --

To Do:
Include (optional?) diagnostic ouput including a map of all halos for all change points (perhaps split into two layers - one for halos where mass is added, and one for where it's removed.)

Create a cut-off threshhold for how deep a cell can be when we initialise it as ocean? Say, no more than 30m? This can then be gradually equilibrated over following restarts.

Remove checksums from old restarts (or disable writing of restart checksums? I think this is an option)

Create a script after redistribution etc is complete that performs a series of checks, including for conservation.


This is the routine that outputs the stocks at the end of the run.

kg_H_Nk = kg_H / NkIce
case (ISTOCK_HEAT)
      value = 0.0
        do k=1,ncat ; do j=jsc,jec ; do i=isc,iec
          part_wt = (G%areaT(i,j)*G%mask2dT(i,j)) * IST%part_size(i,j,k)
          if (part_wt*IST%mH_ice(i,j,k) > 0.0) then
            value = value - (part_wt * (kg_H * IST%mH_snow(i,j,k))) * &
                Energy_melt_enthS(IST%enth_snow(i,j,k,1), 0.0, IST%ITV)
            do m=1,NkIce
              value = value - (part_wt * (kg_H_Nk * IST%mH_ice(i,j,k))) * &
                  Energy_melt_enthS(IST%enth_ice(i,j,k,m), IST%sal_ice(i,j,k,m), IST%ITV)
            enddo
          endif
        enddo ; enddo ; enddo
      endif

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!> energy_melt_enthS returns the energy needed to melt a given snow/ice
!!      configuration, in J kg-1.
function energy_melt_enthS(En, S, ITV) result(e_to_melt)
  real, intent(in) :: En !< The ice enthalpy, in enthalpy units (often J/kg)
  real, intent(in) :: S  !< The ice bulk salinity in g/kg
  type(ice_thermo_type), intent(in) :: ITV !< The ice thermodynamic parameter structure.

  real :: e_to_melt  !< The energy required to melt this mixture of ice and brine
                     !! and warm it to its bulk freezing temperature, in J kg-1.

  e_to_melt = ITV%enth_unit * (enthalpy_liquid_freeze(S, ITV) - En)

end function energy_melt_enthS

!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
!> enthalpy_liquid_freeze returns the enthalpy of liquid water at the freezing
!!    point for a given salinity.
function enthalpy_liquid_freeze(S, ITV)
  real, intent(in)  :: S  !< The ice bulk salinity in g/kg
  type(ice_thermo_type), intent(in) :: ITV !< The ice thermodynamic parameter structure.
  real :: enthalpy_liquid_freeze

  enthalpy_liquid_freeze = ITV%enth_unit * &
    (ITV%Cp_water*(ITV%dTf_dS*S) + ITV%ENTH_LIQ_0)

end function enthalpy_liquid_freeze

Where enth_unit = 1.0, enth_liq_0 = 0.0, dTf_dS = -0.054 (from SIS param file), Cp_water = 4200 (from SIS param file)
kg_H = 1 (from SIS param file H_TO_KG_M2)

For order of operations, redistribution of tracers needs to occur first. Otherwise, if mass is done first, we need to keep track of both the old and new 'h' fields.

Furthermore, a separate ocean mask should be created specifically for the get_halo function which prevents the removal/ addition of mass and tracers from cells that have already been emptied. This still needs to be done. New land cells should be masked out, but cells that will become ocean should remain land to avoid water being added to them before they can be initialised as ocean.

For salt:
In SIS2:

!There is no salt in the snow.
value = 0.0
do m=1,NkIce;
	do k=1,ncat;
		do j=jsc,jec;
			do i=isc,iec
        		value = value + (IST%part_size(i,j,k) * (G%areaT(i,j)*G%mask2dT(i,j))) * &
            	(0.001*(kg_H_Nk*IST%mH_ice(i,j,k))) * IST%sal_ice(i,j,k,m)
enddo ; enddo ; enddo ; enddo

NOTE: When initialising a new coastal cell in a polar region - should we initialise it with sea ice if surrounding cells also have sea ice? Otherwise we are creating artificial polynias. I don't *think* this should be a big deal, as these new cells will always be only one or two cells and usually quite shallow - it's unlikely we're going to be causing spontaneous convection events, but definitely something to look out for.

Note on reproducible sums for stockchecking/ conservation. np.sum() is not strictly accurate with its rounding, and with larger datasets (and when values after the decimal place are important), it is not appropriate. In this instance, the function math.fsum() should be used, although it is roughly 10x slower. Testing these two functions on the h_oce data, the difference between the two is only visible at the 15th significant figure. For conservation checks, this will not matter much, but if these functions are used in the redistribution code, it could become a problem.

NOTE: When we use halo_calc with tracers, 1) Sum should not be used, as it does not consider grid information and 2) Means are loosely approximate for the same reason (the only context in which 'mean' is used for tracer variables is to identify an appropriate temperature/ salinity value when initialising a new cell, in which insance, calculating this properly is not strictly necessary.)

NOTE: We have 3 kinds of ocean mask in our MOM data class now: o_mask, o_mask_new and o_mask_redist. Are they really all used? Certainly we need o_mask_new; o_mask_redist is created then only used once? 

Now adding in timing functions for all script components.